/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.9
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace RakNet {

using System;
using System.Runtime.InteropServices;

public class FT_Node_Plugin : PluginInterface2 {
  private HandleRef swigCPtr;

  internal FT_Node_Plugin(IntPtr cPtr, bool cMemoryOwn) : base(RakNetPINVOKE.FT_Node_Plugin_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(FT_Node_Plugin obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~FT_Node_Plugin() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          RakNetPINVOKE.delete_FT_Node_Plugin(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public static FT_Node_Plugin GetInstance() {
    IntPtr cPtr = RakNetPINVOKE.FT_Node_Plugin_GetInstance();
    FT_Node_Plugin ret = (cPtr == IntPtr.Zero) ? null : new FT_Node_Plugin(cPtr, false);
    return ret;
  }

  public static void DestroyInstance(FT_Node_Plugin i) {
    RakNetPINVOKE.FT_Node_Plugin_DestroyInstance(FT_Node_Plugin.getCPtr(i));
  }

  public FT_Node_Plugin() : this(RakNetPINVOKE.new_FT_Node_Plugin(), true) {
  }

  public void RegisterProcess(FT_Node_Process handler) {
    RakNetPINVOKE.FT_Node_Plugin_RegisterProcess__SWIG_0(swigCPtr, FT_Node_Process.getCPtr(handler));
  }

  public void RegisterProcess(FT_MessageTypesNode type) {
    RakNetPINVOKE.FT_Node_Plugin_RegisterProcess__SWIG_1(swigCPtr, (int)type);
  }

  public void SetRakPeer(RakPeerInterface ptr) {
    RakNetPINVOKE.FT_Node_Plugin_SetRakPeer(swigCPtr, RakPeerInterface.getCPtr(ptr));
  }

  public uint Send(FT_Session session, FT_DataBase data, AddressOrGUID systemIdentifier) {
    uint ret = RakNetPINVOKE.FT_Node_Plugin_Send__SWIG_0(swigCPtr, FT_Session.getCPtr(session), FT_DataBase.getCPtr(data), AddressOrGUID.getCPtr(systemIdentifier));
    if (RakNetPINVOKE.SWIGPendingException.Pending) throw RakNetPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint Send(FT_Session session, FT_DataBase data, PacketPriority priority, PacketReliability reliability, char orderingChannel, AddressOrGUID systemIdentifier) {
    uint ret = RakNetPINVOKE.FT_Node_Plugin_Send__SWIG_1(swigCPtr, FT_Session.getCPtr(session), FT_DataBase.getCPtr(data), (int)priority, (int)reliability, orderingChannel, AddressOrGUID.getCPtr(systemIdentifier));
    if (RakNetPINVOKE.SWIGPendingException.Pending) throw RakNetPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetResultHandler(FT_ConnectProcessResultHandler rh) {
    RakNetPINVOKE.FT_Node_Plugin_SetResultHandler(swigCPtr, FT_ConnectProcessResultHandler.getCPtr(rh));
  }

}

}
